#!/usr/bin/env bash

# HELP install the latest personal fedora setup

# USEFUL COMMAND: dnf whatprovides COMMAND or dnf provides COMMAND
#  e.g. dnf whatprovides nvidia-smi or dnf provides nvidia-smi
# USEFUL COMMAND: adding & disabling repositories
# sudo dnf install -y --best --allowerasing --repofrompath "terra,https://repos.fyralabs.com/terra$(rpm -E %fedora)" --setopt="terra.gpgkey=https://repos.fyralabs.com/terra$(rpm -E %fedora)/key.asc" terra-release || exit
# sudo dnf config-manager setopt terra.enabled=0

export TRACE_SETUP_ON  # set before running to enable traces
export DEBUG_SETUP_ON="yes"
export PATH="$PATH:$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
export UNITS="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )/units"

add-gsettings-shortcut () (
    [[ $# -ne 3 ]] && return 2
    # $1 is the name
    # $2 is the command
    # $3 is the bind, in <Modifier>Key format

    custom_keybinds_enum="$(gsettings get org.gnome.settings-daemon.plugins.media-keys custom-keybindings | sed -e "s/@as//" | tr "'" "\"")"
    custom_keybinds_length="$(echo "$custom_keybinds_enum"  | jq ". | length")"

    keybind_version="custom$custom_keybinds_length"
    new_keybind_enumerator="/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/$keybind_version/"

    new_custom_keybinds_enum="$(echo "$custom_keybinds_enum" | jq -c ". += [\"$new_keybind_enumerator\"]" | tr '"' "'")"
    new_keybind_name=( "org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/$keybind_version/" "name" "$1" )
    new_keybind_command=( "org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/$keybind_version/" "command" "$2" )
    new_keybind_bind=( "org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/$keybind_version/" "binding" "$3" )

    gsettings set "org.gnome.settings-daemon.plugins.media-keys" "custom-keybindings" "$new_custom_keybinds_enum"
    gsettings set "${new_keybind_name[@]}"
    gsettings set "${new_keybind_command[@]}"
    gsettings set "${new_keybind_bind[@]}"

    #gsettings set org.gnome.settings-daemon.plugins.media-keys custom-keybindings "[<altered_list>]"
    #gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ name '<newname>'
    #gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ command '<newcommand>'
    #gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ binding '<key_combination>'
)

configure-residual-permissions () (
    _echo-status "-------------------CHANGING ROOT OWNERSHIP AND GROUPS IN HOME----------------"
    sudo chown "$REAL_USER" "$REAL_USER_HOME"
    sudo chgrp "$REAL_USER" "$REAL_USER_HOME"

    # everything in home should be owned by the user and in the user's group
    # this filter finds which f
    find "$REAL_USER_HOME" -user root -print0 2> /dev/null | while read -d $'\0' file; do
        _echo-debug "sudo chown chgrp $REAL_USER $file"

        sudo chown "$REAL_USER" "$file"
        sudo chgrp "$REAL_USER" "$file"
    done

    _echo-success "Done."
)

copy-dnf () (
    _depends-on tee || sudo dnf install -y tee

    _echo-debug "Copying /etc/dnf/dnf.conf"
    # NOTE: ip_resolve=4 was added to disable ipv6 resolve, because there was an outage lol
    sudo tee "/etc/dnf/dnf.conf" <<-DNF_EOF
[main]
gpgcheck=1
installonly_limit=5
clean_requirements_on_remove=True
best=False
deltarpm=False
skip_if_unavailable=True
max_parallel_downloads=10
metadata_expire=1
keepcache=true
ip_resolve=4
DNF_EOF
)

install-gnome-de () (
    _echo-status "-------------------INSTALLING GNOME----------------"

    sudo dnf group install -y "gnome-desktop"
    sudo dnf install -y "systemd-container"
    sudo systemctl enable gdm

    _echo-success "Done."
)

install-universal-necessities () (
    _echo-status "-------------------INSTALLING ESSENTIAL PACKAGES----------------"
    sudo dnf install -y --best --allowerasing --skip-unavailable $INSTALLABLE_ESSENTIAL_PACKAGES
    sudo systemctl enable --now firewalld

    sudo dnf group install -y --best --allowerasing "hardware-support" "networkmanager-submodules" "printing" "input-methods"

    sudo dnf group install -y --best --allowerasing "libreoffice"
    sudo dnf install -y --best --allowerasing --skip-unavailable $INSTALLABLE_APPLICATION_PACKAGES
    sudo dnf swap gimp gimp3 -y --no-best --allowerasing
    flatpak install --system --noninteractive -y $INSTALLABLE_FLATPAKS
    # install brave from the official repo, do NOT use the flatpak!!!
    sudo dnf config-manager addrepo -y --from-repofile=https://brave-browser-rpm-release.s3.brave.com/brave-browser.repo
    sudo dnf install -y --best brave-browser

    _echo-debug "Checking whether btrfs is in rootfs or homefs (sometimes are different partitions)"
    if _is-btrfs-rootfs || _is-btrfs-homefs; then
        _echo-status "Found BTRFS, installing tools..."
        sudo dnf install -y --best --allowerasing --skip-unavailable $INSTALLABLE_BTRFS_TOOLS
    fi

    flatpak permission-set screenshot screenshot org.flameshot.Flameshot yes
    _echo-debug "Set permissions for flameshot."

    sudo tee "/usr/sbin/update-grub" <<GR_END
#!/bin/sh
set -e
exec grub2-mkconfig -o /boot/grub2/grub.cfg \$@
GR_END

    sudo chown root:root "/usr/sbin/update-grub"
    sudo chmod 755 "/usr/sbin/update-grub"
    _echo-debug "Configured update-grub."

    _echo-success "Done."
)

optimize-hardware () (
    _echo-status "-------------------OPTIMIZING HARDWARE----------------"

    sudo systemctl enable --now systemd-bsod

    if _is-mobile-type; then
        _echo-status "Enabling power-efficient (but less secure) suspend to ram for mobile-type."
        _echo-important "This will FAIL HSI-2 tests."
        sudo grubby --update-kernel=ALL --args="mem_sleep_default=deep"  # deep sleep
        _echo-debug "Enabling deep /sys/power/mem_sleep"
        sudo sh -c 'echo deep > /sys/power/mem_sleep'
        _echo-debug "Updated grub."
        sudo update-grub

        if _is-gnome-session; then
            _echo-debug "Installing s76-scheduler-plugin..."
            git clone git@github.com:KyleGospo/s76-scheduler-plugin.git ~/.local/share/gnome-shell/extensions/s76-scheduler@mattjakeman.com
            _echo-status "Enabling system76-scheduler..."
            sudo dnf copr enable -y kylegospo/system76-scheduler
            sudo dnf install -y --best --allowerasing --skip-unavailable system76-scheduler
            sudo systemctl enable --now com.system76.Scheduler.service
        fi
    fi

    if _is-desktop-type; then
        _echo-status "Enabling non-power efficient (but more secure) suspend to idle (s2idle) for desktop-type..."
        _echo-important "This will PASS HSI-2 tests."
        sudo grubby --update-kernel=ALL --args="mem_sleep_default=s2idle"
        sudo sh -c 'echo s2idle > /sys/power/mem_sleep'
        sudo update-grub
        _echo-status "Disabling mobile-gpu specific service (https://forums.developer.nvidia.com/t/no-matching-gpu-found-with-510-47-03/202315/5)"
        sudo systemctl disable --now nvidia-powerd.service
        return
    fi

    _echo-status "Adding preempt=full kernel parameter..."
    sudo grubby --update-kernel=ALL --args="preempt=full"

    _echo-status "Removing 'user friendly' kernel params."
    _echo-status "If you want to delve deeper in kernel params, check out the CIS Benchmarks"
    _echo-status 'https://www.cisecurity.org/benchmark/distribution_independent_linux'
    sudo grubby --update-kernel=ALL --args="sysrq_always_enabled=1"
    sudo grubby --update-kernel=ALL --remove-args="quiet"

    sudo update-grub
    _echo-success "Done."
)

create-swapfile () (
    # if we haven't created /swapfile, go ahead, otherwise get out
    [[ -n $(cat /etc/fstab | grep "/swapfile swap swap defaults 0 0") ]] && return
    [[ -n $(cat /etc/fstab | grep "/swapfile none swap defaults 0 0") ]] && return

    _echo-status "-------------------CREATING /swapfile----------------"
    # btrfs specific no copy-on-write
    # https://unix.stackexchange.com/questions/599949/swapfile-swapon-invalid-argument
    if _is-btrfs-rootfs; then
        _echo-debug "running btrfs truncate/chattr"
        sudo truncate -s 0 /swapfile
        sudo chattr +C /swapfile
    fi

    kbs=$(grep MemTotal < /proc/meminfo | grep -E -o "[0-9]+")
    sudo dd if=/dev/zero of=/swapfile bs=1KB count="$kbs"
    _echo-debug "created /swapfile"
    sudo chmod 600 /swapfile
    sudo chown root /swapfile
    _echo-debug "set /swapfile permissions"
    sudo mkswap /swapfile
    sudo swapon /swapfile
    _echo-debug "mkswap/swapon done"

    # btrfs specific fstab entry
    if _is-btrfs-rootfs; then
        sudo sh -c 'echo "/swapfile none swap defaults 0 0" >> /etc/fstab'
        _echo-success "Done."
        return
    fi
    sudo sh -c 'echo "/swapfile swap swap defaults 0 0" >> /etc/fstab'
    _echo-success "Done."
)


install-proprietary-nvidia-drivers () (
    # install nvidia drivers if we have an NVIDIA card
    if ! _is-nvidia-gpu; then return; fi
    if ! _is-nvidia-nouveau; then return; fi

    readonly NVIDIA_GPU="$(_nvidia-gpu-model)"

    _echo-status "-------------------INSTALLING NVIDIA DRIVERS----------------"
    _echo-status "Found $NVIDIA_GPU!"

    sudo dnf install -y --best --allowerasing --skip-unavailable $INSTALLABLE_NVIDIA_DRIVERS

    # check arch wiki, these enable DRM
    sudo grubby --update-kernel=ALL --args="nvidia-drm.modeset=1"
    sudo grubby --update-kernel=ALL --args="nvidia-drm.fbdev=1"
    _echo-debug "Added modeset & fbdev."
    sudo update-grub
    _echo-debug "Updated grub."

    _echo-debug "Regenerating akmod build..."
    sudo akmods --force --rebuild || exit 1
    sudo dracut --force --regenerate-all || exit 1
    _echo-debug "Regenerated akmod build."

    _echo-unexpected "NVIDIA drivers will be built on next boot."

    if _is-uefi && [[ $(mokutil --sb-state 2> /dev/null) ]]; then
        # https://blog.monosoul.dev/2022/05/17/automatically-sign-nvidia-kernel-module-in-fedora-36/
        # https://github.com/NVIDIA/yum-packaging-precompiled-kmod/blob/main/UEFI.md
        # the official NVIDIA instructions recommend installing the driver first
        # however, we're going to install the drivers *after* possibly enrolling MOK
        # since we shouldn't reboot/shutdown for a few minutes after installing akmod drivers
        # since they'll be compiling in the background!
        # Their recommendations talk about kmod, not akmod, but the process should be the same
        _echo-important "You only have to do this once. Do NOT re-enroll MOK a second time."
        if ask user question 'Do you want to enroll MOK and restart afterwards?'; then
            _echo-important "Make sure you enroll MOK when you restart."

            _echo-status "Signing GPU drivers..."
            sudo kmodgenca -a
            sudo mokutil --import /etc/pki/akmods/certs/public_key.der

            _echo-important "Finished signing GPU drivers."
            sudo systemctl reboot
        fi
    else
        _echo-unexpected "UEFI not found; please restart & use UEFI in order to sign drivers..."
    fi
)

install-media-codecs () (
    _echo-status "-------------------INSTALLING CODECS / H/W VIDEO ACCELERATION----------------"

    # based on https://github.com/devangshekhawat/Fedora-39-Post-Install-Guide
    sudo dnf install -y --best --allowerasing --skip-unavailable lame\*
    sudo dnf install -y --best --allowerasing --skip-unavailable "gstreamer1-plugin-openh264" "gstreamer1-libav"
    sudo dnf group install -y --best --allowerasing --with-optional "multimedia"

    # extra by me
    sudo dnf install -y --best --allowerasing --skip-unavailable "obs-studio" \
    "obs-studio-plugin-vkcapture" \
    "obs-studio-plugin-vlc-video" \
    "obs-studio-plugin-webkitgtk" \
    "obs-studio-plugin-x264" \
    "v4l2loopback"  # used for mirroring the scene as a camera in OBS

    sudo dnf install -y --best --allowerasing --skip-unavailable "ffmpeg" \
    "gstreamer-ffmpeg" \
    "ffmpeg-libs" \
    "libva" \
    "libva-utils" \
    "ffmpegthumbnailer" \
    "libavcodec-freeworld" \
    "pipewire-codec-aptx"
    if _is-gnome-session; then
        # in order to have nautilus create thumbnails, we need both the ffmpeg thumbnailer & the appropriate codec
        #  afterwards, refresh the current cache
        sudo dnf install -y --best --allowerasing --skip-unavailable "ffmpegthumbnailer" "libavcodec-freeworld"
        [[ -d "$REAL_USER_HOME/.cache/thumbnails" ]] && rm -rf "$REAL_USER_HOME/.cache/thumbnails"
    fi
    sudo dnf reinstall -y "/etc/yum.repos.d/fedora-cisco-openh264.repo"
    sudo dnf install -y --best --allowerasing --skip-unavailable "openh264" "gstreamer1-plugin-openh264" "mozilla-openh264"
)

install-gaming-packages () (
    _echo-status "-------------------INSTALLING GAMING PACKAGES----------------"
    sudo dnf install -y --best --allowerasing --skip-unavailable "steam" "gamescope"
    flatpak install --system --noninteractive -y "com.discordapp.Discord" "com.leinardi.gst"
    # vulkan drivers are required for proton-ge to work
    sudo dnf install -y --best --allowerasing --skip-unavailable "protontricks" "vulkan" "vulkan-loader" "vulkan-loader.i686"
    _echo-debug "installed proton-ge prerequisites"
    update-compat-layers
    _echo-debug "updated compatibility layers"

    # openrgb utils
    if lscpu | grep -i amd; then
        _echo-status "Installing openrgb (setup works only for AMD chipsets currently) "
        sudo dnf install -y --best --allowerasing --skip-unavailable "openrgb" "openrgb-udev-rules" "i2c-tools"
        sudo modprobe i2c-dev
        sudo modprobe i2c-piix4
        sudo touch /etc/modules-load.d/i2c.conf
        sudo sh -c 'echo "i2c-dev" >> /etc/modules-load.d/i2c.conf'
        sudo sh -c 'echo "i2c-piix4" >> /etc/modules-load.d/i2c.conf'

        sudo tee "/usr/local/bin/openrgb-load-profile" <<EOF
#!/usr/bin/env bash

user="\$USER"
if [[ \$(id -u) = 0 ]]; then
    user="\${SUDO_USER:-\$(logname)}"
fi

if [[ -z "\$user" ]]; then
    echo 'Could not locate calling user for openrgb-load-profile.'
    echo 'This is a fatal condition, because no profiles will be found.'
    exit 1
fi

openrgb_dir="/home/\$user/.config/OpenRGB"

if [[ ! -d "\$openrgb_dir" ]]; then
    echo "Could not locate openrgb directory \$openrgb_dir."
    echo "Have you saved/created any profile there?"
    echo "If you believe the directory exists, or should have been found elsewhere, open an issue in github."
    exit 1
fi

profile="\$openrgb_dir/\$(ls -v "\$openrgb_dir" | grep '.orp' | head -n 1)"

if [[ ! -f "\$profile" ]]; then
    echo "Could not locate any profile."
    echo "... aka, the following didn't match anything: \$profile"
    echo "If you believe the file exists, or should have been found elsewhere, open an issue on github."
    exit 1
fi

echo "Loading '\$profile'"

hasFailed="\$(openrgb --profile "\$profile"| grep -i 'failed' | grep -i 'profile')"
exit \$(test -z "\$hasFailed")
EOF

        sudo chown root:root "/usr/local/bin/openrgb-load-profile"
        sudo chmod 755 "/usr/local/bin/openrgb-load-profile"

        systemctl enable --user --now "$UNITS/openrgb.service"
    fi

    sudo chattr +T /home
    _echo-debug "Configured chattr +T for /home"
    _echo-success "Done."
)

# man 5 sysctl.d
#    CONFIGURATION DIRECTORIES AND PRECEDENCE
#    ...
#    All configuration files are sorted by their filename in lexicographic order, regardless of which of the directories they reside in.
#    If multiple files specify the same option, the entry in the file with the lexicographically latest name will take precedence.
#    It is recommended to prefix all filenames with a two-digit number and a dash, to simplify the ordering of the files.

configure-system-defaults () (
    _echo-status "-------------------SETTING UP SYSTEM DEFAULTS----------------"
    _echo-debug "Lowering swappiness"
    sudo sh -c 'echo "vm.swappiness = 3" > "/etc/sysctl.d/90-swappiness.conf"'
    _echo-success "Lowered swappiness."
    _echo-debug "Raising user-watches"
    sudo sh -c 'echo "fs.inotify.max_user_watches = 600000" > "/etc/sysctl.d/90-max_user_watches.conf"'
    _echo-success "Raised user watches."
    _echo-debug "Capping nproc-count to prevent fork-bombs (hard nproc 10_000)"
    sudo sh -c "echo \"$REAL_USER 'hard nproc 10000'\" > '/etc/security/limits.d/90-nproc.conf'"
    _echo-success "Capped maximum number of processes."
    _echo-debug "Creating convenience for sudoers.d/convenience-defaults"
    # 440 is the default rights of /etc/sudoers file, so we're copying the rights just in case
    #  (even though visudo -f /etc/sudoers.d/test creates the file with 640)
    sudo sh -c 'echo "Defaults timestamp_timeout=120, pwfeedback" > "/etc/sudoers.d/convenience-defaults"'
    sudo chmod 440 "/etc/sudoers.d/convenience-defaults"
    _echo-success "Created sudoers.d convenience defaults."

    _echo-debug 'Creating polkit policy @ /etc/polkit-1/rules.d/99-custom-units.rules'
    _echo-debug ' ... in order to allow wheel users restart the NetworkManager.service '
    _echo-debug ' without further authorization.'
    sudo tee '/etc/polkit-1/rules.d/99-custom-units.rules' <<EOF
polkit.addRule(
  function(action, subject) {
    if (action.id == "org.freedesktop.systemd1.manage-units" &&
        action.lookup("unit") == "NetworkManager.service" &&
        subject.isInGroup("wheel")) {

        return polkit.Result.YES;
      }
  }
)
EOF

    sudo systemctl restart polkit
    _echo-success "Done."
)

tweak-minor-details () (
    _echo-status "-------------------TWEAKING MINOR DETAILS----------------"
    # https://github.com/tommytran732/Linux-Setup-Scripts/blob/main/Fedora-Workstation-36.sh
    sudo systemctl enable --now fstrim.timer
    _echo-debug "Enabled fs trim timer."
    sudo timedatectl set-local-rtc '0' # for fixing dual boot time inconsistencies
    _echo-debug "Set local rtc to 0."
    # if the statement below doesnt work, check this out
    #  https://old.reddit.com/r/linuxhardware/comments/ng166t/s3_deep_sleep_not_working/
    # stop network manager from waiting until online, improves boot times
    sudo systemctl disable --now NetworkManager-wait-online.service
    _echo-debug "Disabled NetworkManager-wait-online.service"
    # if GNOME, stop Software from autostarting & updating in the background, no reason
    _is-gnome-session && sudo rm /etc/xdg/autostart/org.gnome.Software.desktop 2> /dev/null

    _echo-success "Done."
)

configure-ssh-defaults () (
    # if the directory already exists, abandon
    [[ -d "$REAL_USER_HOME/.ssh" ]] && return

    sudo dnf install -y "ssh"
    sudo systemctl disable --now sshd
    _echo-status "-------------------GENERATING SSH KEY----------------"
    mkdir -p "$REAL_USER_HOME/.ssh"
    ssh-keygen -q -t ed25519 -N '' -C "$REAL_USER@$(hostname)" -f "$REAL_USER_HOME/.ssh/id_ed25519" -P "" <<< $'\ny' >/dev/null 2>&1
    cat "$REAL_USER_HOME/.ssh/id_ed25519.pub"
    # this is REQUIRED for ssh related thingies; key must NOT be readable by anyone else but this user
    sudo chown "$REAL_USER" "$REAL_USER_HOME/.ssh/id_ed25519"
    sudo chmod 700 "$REAL_USER_HOME/.ssh/id_ed25519"
    _echo-success "Done."
)

configure-tailscaled () (
    # TODO eventually replace fail2ban with crowdsec here, along with a 'remediation component'
    #  https://community.hetzner.com/tutorials/how-to-set-up-crowdsec-and-protect-ssh
    _echo-status "Installing tailscaled, openssh-server (sshd) & fail2ban"

    sudo dnf config-manager addrepo --from-repofile="https://pkgs.tailscale.com/stable/fedora/tailscale.repo"
    sudo dnf install -y tailscale openssh-server fail2ban

    sudo systemctl enable --now tailscaled
    sudo systemctl enable --now fail2ban

    tailscaled_ipvX=$(ip --json -brief address | jq '.[] | select(."ifname" | startswith("tailscale"))' | jq '."addr_info".[0].local | select(. != null and . != "127.0.0.1")')

    if [[ -z $tailscaled_ipvX ]]; then
        _echo-unexpected("Couldn't identify tailscaled interface, and sshd is listening on all interfaces!")
    else
        sudo tee "/etc/ssh/sshd_config" <<EOF
ListenAddress $tailscaled_ipvX
EOF
        _echo-important("Bound tailscaled to $tailscaled_ipvX!")
    fi

    sleep 2

    sudo systemctl unmask sshd
    sudo systemctl enable --now sshd

    sudo tee "/etc/fail2ban/jail.local" <<EOF
[sshd]
enabled = true
port = ssh
filter = sshd
logpath = /var/log/auth.log
maxretry = 5
findtime = 600
bantime = 3600
ignoreip = 127.0.0.1
EOF

    # _echo-important "$(tailscale ip -4)"
    #  "no current Tailscale IPs; state: NeedsLogin"
    _echo-status "Done."
)

install-jetbrains-toolbox () (
    # dependencies, described here
    #  https://github.com/nagygergo/jetbrains-toolbox-install
    _depends-on tar || sudo dnf install -y tar

    echo "-------------------INSTALLING JETBRAINS TOOLBOX----------------"
    sudo dnf install -y --best --allowerasing "libXtst" "libXrender" "glx-utils" "fontconfig-devel" "gtk3" "tar"
    mkdir "/tmp/jetbrains-toolbox"  # tmp dir
    sudo mkdir "/opt/jetbrains-toolbox"  # install dir

    readonly ARCHIVE_URL=$(curl -s 'https://data.services.jetbrains.com/products/releases?code=TBA&latest=true&type=release' | grep -Po '"linux":.*?[^\\]",' | awk -F ':' '{print $3,":"$4}'| sed 's/[", ]//g')
    wget -cO "/tmp/jetbrains-toolbox/jetbrains-toolbox.tar.gz" "$ARCHIVE_URL"

    echo "Extracting jetbrains-toolbox to /tmp/jetbrains-toolbox ..."
    sudo tar -xzf "/tmp/jetbrains-toolbox/jetbrains-toolbox.tar.gz" -C "/opt/jetbrains-toolbox" --strip-components=1
    rm -f "/tmp/jetbrains-toolbox/jetbrains-toolbox.tar.gz"

    echo "Linking /opt/jetbrains-toolbox/jetbrains-toolbox to /usr/local/bin ..."
    sudo chmod 755 "/opt/jetbrains-toolbox/jetbrains-toolbox"
    sudo chown -R root:root "/opt/jetbrains-toolbox"
    sudo ln -sf "/opt/jetbrains-toolbox/jetbrains-toolbox" "/usr/local/bin/jetbrains-toolbox"
    rm -rf "/tmp/jetbrains-install"  # remove tmp dir, not needed anymore
    echo "Done."
    jetbrains-toolbox &
)

readonly REAL_USER="${SUDO_USER:-$(whoami)}"
# https://unix.stackexchange.com/questions/247576/how-to-get-home-given-user
readonly REAL_USER_HOME="/home/$REAL_USER"
readonly HAS_CHANGED_HOSTNAME_FILE="/opt/has-changed-hostname"

[[ -n "$TRACE_SETUP_ON" ]] && set -x

shopt -s globstar
shopt -s dotglob
shopt -s nullglob

#######################################################################################################

readonly INSTALLABLE_ADWAITA_PACKAGES="\
adwaita-icon-theme \
adwaita-cursor-theme \
adwaita-gtk2-theme \
adw-gtk3-theme \
adwaita-qt5 \
qadwaitadecorations-qt5 \
qadwaitadecorations-qt6 \
adwaita-qt6 \
"

readonly INSTALLABLE_ADWAITA_FLATPAKS="\
org.gtk.Gtk3theme.adw-gtk3 \
org.gtk.Gtk3theme.adw-gtk3-dark \
"

readonly INSTALLABLE_GNOME_FLATPAKS="\
de.haeckerfelix.Fragments \
org.gnome.Snapshot \
"

readonly INSTALLABLE_GNOME_EXTENSIONS="\
gnome-extensions-app \
gnome-shell-extension-places-menu \
gnome-shell-extension-appindicator \
"

#######################################################################################################

# TODO replace grub2 with systemd-boot when we get rid of all the issues
#  regarding proprietary NVIDIA Drivers, and signing them for UEFI
#  apparently, this is the way going forward with unified kernel image
#  https://fedoraproject.org/wiki/Changes/Unified_Kernel_Support_Phase_2
#  so we won't replace it manually, it'll be replaced be Red Hat themselves
readonly INSTALLABLE_ESSENTIAL_PACKAGES="\
"fuse" \
setroubleshoot \
setroubleshoot-plugins \
firewall-config \
openvpn \
openssl \
python3-cairo \
"

readonly INSTALLABLE_APPLICATION_PACKAGES="\
chromium \
fedora-chromium-config \
gimp \
evince \
piper \
pulseeffects \
"

readonly INSTALLABLE_FLATPAKS="\
org.flameshot.Flameshot \
com.spotify.Client \
com.github.rafostar.Clapper \
com.github.PintaProject.Pinta \
io.gitlab.theevilskeleton.Upscaler \
com.github.tchx84.Flatseal \
it.mijorus.gearlever \
"

readonly INSTALLABLE_BTRFS_TOOLS="\
btrfs-assistant \
timeshift \
"

readonly INSTALLABLE_NVIDIA_DRIVERS="\
gcc \
kernel-headers \
kernel-devel \
akmod-nvidia \
xorg-x11-drv-nvidia \
xorg-x11-drv-nvidia-libs \
xorg-x11-drv-nvidia-cuda \
xorg-x11-drv-nvidia-power \
nvidia-gpu-firmware \
nvidia-modprobe \
nvidia-smi \
"

readonly INSTALLABLE_VIRTUALIZATION_PACKAGES="\
swtpm \
swtpm-tools \
virt-manager \
libvirt-devel \
virt-top \
libguestfs-tools \
guestfs-tools \
bridge-utils \
libvirt \
virt-install \
qemu-kvm \
qemu-audio-pipewire \
"

readonly INSTALLABLE_DEV_PKGS="\
git \
gcc \
clang \
vulkan \
meson \
cmake \
ninja-build \
java-latest-openjdk \
java-latest-openjdk-devel \
sqlitebrowser \
"

# NOTE: these are global and should be treated as desktop agnostic
readonly UNINSTALLABLE_BLOAT="\
rhythmbox \
totem \
cheese \
gnome-tour \
gnome-calendar \
gnome-weather \
gnome-terminal \
gnome-software \
gnome-font-viewer \
gnome-characters \
gnome-classic-session \
gnome-initial-setup \
gnome-boxes \
gnome-calculator \
gnome-contacts \
gnome-maps \
gnome-clocks \
gnome-connections \
gnome-shell-extension-gamemode \
gnome-shell-extension-background-logo \
"

#######################################################################################################

[[ "${BASH_SOURCE[0]}" != "${0}" ]] && return

if ! ping -q -c 1 -W 1 google.com > /dev/null; then
    _echo-unexpected "Network connection was not detected."
    _echo-unexpected "This script needs network connectivity to continue."
    exit 1
fi

if _is-root; then
    _echo-unexpected "The script must not be run as super-user."
    _echo-unexpected "Please re-run the script as a regular user."
    exit 2
fi

# add dnf plugin
sudo dnf install -y --best --allowerasing --skip-unavailable "dnf5-command(config-manager)"

# dependencies
sudo dnf install -y --best --allowerasing --skip-unavailable flatpak curl plocate pciutils udisks2

# improve sudo dnf performance
copy-dnf

# for some reason this repository is added on every new install, it's NOT needed since we use toolbox
sudo dnf copr remove -y --skip-unavailable phracek/PyCharm 2> /dev/null
# rpmfusion-free
if [[ -z $(dnf repolist | grep 'rpmfusion-free') ]]; then
    sudo dnf install -y --best --allowerasing "https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm" || exit
fi
# rpmfusion-nonfree
if [[ -z $(dnf repolist | grep 'rpmfusion-nonfree') ]]; then
    sudo dnf install -y --best --allowerasing "https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm" || exit
fi

# no requirement to add flathub ourselves anymore in f38; it should be enabled by default. however, it may not be, most likely by accident, so this is a failsafe
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo 2> /dev/null || exit
sudo flatpak remote-add --if-not-exists flathub-beta https://flathub.org/beta-repo/flathub-beta.flatpakrepo 2> /dev/null || exit
sudo flatpak remote-delete fedora 2> /dev/null
sudo flatpak remote-delete fedora-testing 2> /dev/null

sudo dnf update -y
sudo dnf upgrade -y --refresh

#######################################################################################################

# requirements across all desktops
readonly TERMINAL_OF_CHOICE="${INSTALLABLE_TERMINAL:-alacritty}"
sudo dnf install -y --best --allowerasing "$TERMINAL_OF_CHOICE" \
"glx-utils" "mesa-dri-drivers" "mesa-vulkan-drivers" \
"plymouth" "plymouth-system-theme" "tuned-ppd"
sudo dnf group install -y "standard"

_echo-debug "Installed terminal of choice ($TERMINAL_OF_CHOICE) for GUI-land."

if [[ ! -f "$HAS_CHANGED_HOSTNAME_FILE" ]]; then
    if ask user question "Do you want to change the current hostname (current is: $(hostname))?"; then
        sudo hostnamectl hostname "$(ask system input 'Please provide a suitable hostname')"
        sudo touch "$HAS_CHANGED_HOSTNAME_FILE"
        _echo-debug "Updated hostname."
    fi
fi

# if there's no desktop environment running...
if [[ -z $XDG_CURRENT_DESKTOP ]]; then
    _echo-debug "No \$XDG_CURRENT_DESKTOP detected: $XDG_CURRENT_DESKTOP"
    # run installer ...
    install-gnome-de

    _echo-important "Making sure we're booting into a DE next time we boot..."
    sudo systemctl set-default graphical.target
    _echo-debug "Set-default graphical.target"
    _echo-debug "Rebooting in 5''..."
    sleep 5  # sleep so user can actually read message just in case
    sudo systemctl reboot
fi

if _is-gnome-session; then
    _echo-debug "GNOME session detected. Installing GNOME/libadwaita-specific packages."
    sudo dnf install -y --best --allowerasing "loupe"
    sudo dnf install -y --best --allowerasing $INSTALLABLE_ADWAITA_PACKAGES $INSTALLABLE_GNOME_EXTENSIONS
    sudo dnf install -y --best --allowerasing 'gnome-session-xsession'
    flatpak install --system --noninteractive -y $INSTALLABLE_ADWAITA_FLATPAKS
    flatpak install --system --noninteractive -y $INSTALLABLE_GNOME_FLATPAKS
fi

# this needs to be up-to-date for some commands
_echo-debug "running updatedb..."
if [[ $(sudo updatedb 2> /dev/null) ]]; then
    _echo-unexpected "updatedb errored, retrying with absolute path"
    sudo /usr/sbin/updatedb
fi

#######################################################################################################

_echo-important "Note that NVIDIA drivers require manual confirmation for UEFI MOK enrollment"
_echo-important " and this cannot be automated due to its intrusive nature."
sleep 5

_echo-debug "uninstalling bloat"
sudo dnf remove -y $UNINSTALLABLE_BLOAT

install-universal-necessities
install-media-codecs
install-proprietary-nvidia-drivers
optimize-hardware
create-swapfile

configure-system-defaults
tweak-minor-details
configure-ssh-defaults

sudo dnf remove -y cups-browsed

#######################################################################################################
# user options here, ask most of the stuff ahead of time.

_echo-important "You will be asked a series of questions ahead of time, so you can go semi-AFK while installing."

ask user question 'Do you want to install snapd?' && INSTALL_SNAPD="yes"
_echo-debug "Will install snapd? $INSTALL_SNAPD"
ask user question 'Do you want to install gaming packages?' && INSTALL_GAMING="yes"
_echo-debug "Will install gaming? $INSTALL_GAMING"
ask user question 'Do you want to install terminal tools?' && INSTALL_TERM_TOOLS="yes"
_echo-debug "Will install terminal-tools? $INSTALL_TERM_TOOLS"
ask user question 'Do you want to install tailscaled?' && INSTALL_TAILSCALED="yes"
_echo-debug "Will install tailscaled? $INSTALL_TAILSCALED"
ask user question 'Do you want to install development tools?' && INSTALL_DEV_TOOLS="yes"
_echo-debug "Will install dev tools? $INSTALL_DEV_TOOLS"
ask user question 'Do you want to install rpm tools?' && INSTALL_RPM_TOOLS="yes"
_echo-debug "Will install rpm tools? $INSTALL_RPM_TOOLS"
ask user question 'Do you want to install virtualization packages?' && INSTALL_VIRTUALIZATION="yes"
_echo-debug "Will install virtualization? $INSTALL_VIRTUALIZATION"
ask user question 'Do you want to install containerization packages?' && INSTALL_CONTAINERIZATION="yes"
_echo-debug "Will install containerization? $INSTALL_CONTAINERIZATION"
ask user question 'Do you want to install zeno/scrcpy?' && INSTALL_SCRCPY="yes"
_echo-debug "Will install scrcpy? $INSTALL_SCRCPY"
ask user question 'Do you want to install JetBrains Toolbox?' && INSTALL_JETBRAINS="yes"
_echo-debug "Will install jetbrains? $INSTALL_JETBRAINS"
ask user question 'Do you want to install Zed Text Editor?' && INSTALL_ZED="yes"
_echo-debug "Will install zed? $INSTALL_ZED"
ask user question 'Do you want to install joplin?' && INSTALL_JOPLIN="yes"
_echo-debug "Will install joplin? $INSTALL_JOPLIN"

#######################################################################################################

[[ -n "$INSTALL_GAMING" ]] && install-gaming-packages
[[ -n "$INSTALL_TAILSCALED" ]] && configure-tailscaled

if [[ -n "$INSTALL_TERM_TOOLS" ]]; then
    _echo-status "-------------------INSTALLING TERMINAL TOOLS----------------"

    # 'expect' pkg provides the (very) useful 'unbuffer' command
    sudo dnf install -y --best --allowerasing --skip-unavailable "tldr" "git-delta" "expect"

    _echo-success "Done."
fi

if [[ -n "$INSTALL_DEV_TOOLS" ]]; then
    _echo-status "-------------------INSTALLING DEV TOOLS----------------"

    sudo dnf group install -y --best --allowerasing  "c-development" "development-tools"
    sudo dnf install -y --best --allowerasing --skip-unavailable $INSTALLABLE_DEV_PKGS
    sudo dnf install -y --best --allowerasing nmap net-tools
    flatpak install --system --noninteractive -y "net.werwolv.ImHex"

    _echo-success "Done."
fi

if [[ -n "$INSTALL_RPM_TOOLS" ]]; then
    _echo-status "-------------------INSTALLING RPM TOOLS----------------"

    sudo dnf group install -y --best --allowerasing 'rpm-development-tools'
    sudo dnf install -y --best --allowerasing --skip-unavailable \
    rpmspectool \
    fedora-packager \
    fedpkg copr-cl \
    rust2rpm

    # Useful fedpkg commands:
    #  https://docs.fedoraproject.org/en-US/package-maintainers/Pull_Request_Guide/
    #   fedpkg clone -a 'rpms/pkgname'
    #  or
    #   fedpkg clone -a 'forks/<username>/rpms/pkgname'
    #   fedpkg sources
    #   fedpkg new-sources --offline ./filename.tar.gz
    #   fedpkg build
    #  if you have no permissions to build, you can alternatively run
    #   rpmbuild -ba ./pkgname.spec
    #  however the sources & relevant patches will have to be in `~/rpmbuild/SOURCES`
    # rust2rpm generates .spec files from rust builds

    _echo-success "Done."
fi

if [[ -n "$INSTALL_VIRTUALIZATION" ]]; then
    _echo-status "-------------------INSTALLING VIRTUALIZATION PACKAGES----------------"
    sudo dnf install -y --best --allowerasing --skip-unavailable $INSTALLABLE_VIRTUALIZATION_PACKAGES
    if _is-virtual-machine; then
        sudo dnf group install -y "guest-agents" "guest-desktop-agents"
        _echo-debug "Installed guest-agents & guest-desktop-agents."
    fi
    sudo usermod -a -G libvirt "$REAL_USER"
    _echo-debug "Added $REAL_USER to libvirt group."
    _echo-success "Done."
fi

if [[ -n "$INSTALL_CONTAINERIZATION" ]]; then
    _echo-status "-------------------INSTALLING CONTAINERIZATION PACKAGES----------------"
    sudo dnf group install -y "container-management"
    _echo-success "Done."
fi

if [[ -n "$INSTALL_SCRCPY" ]]; then
    _echo-status "-------------------INSTALLING zeno/scrcpy----------------"
    sudo dnf copr enable -y zeno/scrcpy
    sudo dnf install -y --best --allowerasing --skip-unavailable scrcpy adb
    sudo dnf install -y --best --allowerasing nmap net-tools
    sudo systemctl enable --now adb
    _echo-success "Done."
fi

if [[ -n "$INSTALL_SNAPD" ]]; then
    _echo-status "-------------------INSTALLING SNAP ----------------"
    sudo dnf install -y --best --allowerasing snapd
    sudo systemctl enable --now snapd
    # relevant policykit actions were grabbed via `pkaction | grep -i snap`
    #  for more information on this file, see `man pklocalauthority`
    #  also check out:
    #  - https://askubuntu.com/questions/1111883/polkit-pkla-files-seem-to-be-ignored-in-18-04
    #  - https://unix.stackexchange.com/questions/458478/policy-kit-isnt-working-properly
    sudo tee '/etc/polkit-1/localauthority/50-local.d/10-snap-management.pkla' <<EOF
[Allow wheel group members to manage snaps]
Identity=unix-group:wheel
Action=io.snapcraft.snapd.*
ResultAny=yes
ResultInactive=yes
ResultActive=yes
EOF
    sudo snap set system refresh.hold="$(date --iso-8601=seconds -d '+30 years')"
fi

[[ -n "$INSTALL_JETBRAINS" ]] && install-jetbrains-toolbox
[[ -n "$INSTALL_ZED" ]] && curl -f https://zed.dev/install.sh | sh
[[ -n "$INSTALL_ZED" ]] && sudo dnf remove -y "gnome-text-editor" "gedit"

# this is bad but it's the official 'packaging' format jesus christ
[[ -n "$INSTALL_JOPLIN" ]] && curl --proto '=https' --tlsv1.2 -sSf 'https://raw.githubusercontent.com/laurent22/joplin/dev/Joplin_install_and_update.sh' | bash
#######################################################################################################

configure-residual-permissions

mapfile -t parts < <(blkid -o list | grep --invert-match "crypto_" | grep -i "not mounted" | awk '{ print $1 }')
[[ -n "$parts" ]] && _echo-important "--------------------------- POSSIBLE FSTAB PARTITIONS ---------------------------"
for part in "${parts[@]}"; do
    part_name=$(echo $part | tr '/' ' ' | awk '{ print $NF }')
    # 512 size blocks, divided by 2, divided by 1024*1024
    part_size=$(( $(cat /sys/class/block/$part_name/size)/2097152 ))
    # if it's a really small partition, it's probably something like a uefi/bootmenu partition, skip it
    [[ $part_size -lt 2 ]] && continue

    _echo-important "Found PARTITION $part with SIZE $part_size GB"
    _echo-important "Mount with mount --mkdir $part $REAL_USER_HOME/MOUNTPOINT"
    _echo-important "For permanently mounted partitions add $part to fstab as: "
    _echo-important "$part /MOUNTPOINT auto rw,user,exec,nosuid,nodev,nofail,auto,x-gvfs-show,x-gvfs-name=YOUR_NAME_HERE 0 0"
    _echo-important "If this is a drive you don't want to automatically mount, add $part to fstab as: "
    _echo-important "$part /home/$REAL_USER_HOME/MOUNTPOINT auto rw,user,exec,nosuid,nodev,nofail,x-gvfs-show,x-gvfs-name=YOUR_NAME_HERE 0 0"
    _echo-important "--------"
    _echo-important "FOR HOME PARTITIONS add $part to fstab as:"
    _echo-important "$part /home/USERNAME auto defaults 0 2"
    _echo-important "Then run:"
    _echo-important "sudo mount -a && sudo useradd --home /home/USERNAME USERNAME && sudo sudo chown -R USERNAME:USERNAME /home/USERNAME"
    _echo-important "---------------------------"
done

_echo-important "HSI Report failures (through fwupdtool):"
sudo fwupdtool security 2> /dev/null | grep -i '✘'

_echo-important "Make sure to restart your PC after making all the necessary adjustments."
_echo-important "Remember to add a permanent mount point for internal storage partitions."

if _is-gnome-session; then
    _echo-status "Personalizing GNOME session..."
    _echo-status "Recommended GNOME extensions: "
    _echo-important "- GTK3 Theme Auto Switcher (https://extensions.gnome.org/extension/4998/legacy-gtk3-theme-scheme-auto-switcher/)"
    _echo-important "- Tailscale Status (https://github.com/maxgallup/tailscale-status)"

    _echo-status "Configuring all gsettings for $REAL_USER..."
    foreach $(partial gsettings set org.gnome.desktop.wm.keybindings {1} "[]" ) < <(gsettings list-recursively org.gnome.desktop.wm.keybindings | awk '{ print $2 }')

    # theme settings
    gsettings set org.gnome.desktop.interface cursor-theme 'Adwaita'
    gsettings set org.gnome.desktop.interface icon-theme 'Adwaita'
    gsettings set org.gnome.desktop.interface gtk-theme 'adw-gtk3-dark'
    gsettings set org.gnome.desktop.interface color-scheme 'prefer-dark'

    # custom keybinds/shortcuts
    gsettings set org.gnome.settings-daemon.plugins.media-keys custom-keybindings '[]'
    add-gsettings-shortcut "gnome-system-monitor" "gnome-system-monitor" "<Shift><Control>Escape"
    add-gsettings-shortcut "flameshot" "flatpak run --command=flameshot org.flameshot.Flameshot gui" "Print"
    add-gsettings-shortcut "$TERMINAL_OF_CHOICE" "$TERMINAL_OF_CHOICE" "<Super>t"  # ghostty --command=fish

    # nautilus & gtk3/gtk4 filechooser settings
    gsettings set org.gnome.nautilus.preferences show-create-link true
    gsettings set org.gnome.nautilus.preferences show-delete-permanently false
    gsettings set org.gnome.nautilus.preferences show-hidden-files true
    gsettings set org.gnome.nautilus.preferences recursive-search 'local-only'
    gsettings set org.gnome.nautilus.preferences mouse-use-extra-buttons false
    gsettings set org.gnome.nautilus.list-view default-zoom-level 'small'
    gsettings set org.gnome.nautilus.preferences default-folder-viewer 'list-view'
    gsettings set org.gtk.Settings.FileChooser clock-format '24h'
    gsettings set org.gtk.Settings.FileChooser date-format 'regular'
    gsettings set org.gtk.Settings.FileChooser show-hidden true
    gsettings set org.gtk.Settings.FileChooser show-size-column true
    gsettings set org.gtk.Settings.FileChooser show-type-column true
    gsettings set org.gtk.Settings.FileChooser sort-directories-first true
    gsettings set org.gtk.Settings.FileChooser type-format 'category'
    gsettings set org.gtk.Settings.FileChooser sidebar-width 140
    gsettings set org.gtk.gtk4.Settings.FileChooser clock-format '24h'
    gsettings set org.gtk.gtk4.Settings.FileChooser date-format 'regular'
    gsettings set org.gtk.gtk4.Settings.FileChooser show-hidden true
    gsettings set org.gtk.gtk4.Settings.FileChooser sort-directories-first true
    gsettings set org.gtk.gtk4.Settings.FileChooser type-format 'category'
    gsettings set org.gtk.gtk4.Settings.FileChooser view-type 'list'
    gsettings set org.gtk.gtk4.Settings.FileChooser sort-directories-first true

    # functional wm settings
    gsettings set org.gnome.desktop.wm.preferences action-double-click-titlebar 'toggle-maximize'
    gsettings set org.gnome.desktop.wm.preferences action-middle-click-titlebar 'none'
    gsettings set org.gnome.desktop.wm.preferences action-right-click-titlebar 'menu'
    gsettings set org.gnome.desktop.wm.preferences auto-raise false
    gsettings set org.gnome.desktop.wm.preferences auto-raise-delay 500
    gsettings set org.gnome.desktop.wm.preferences button-layout 'appmenu:close'
    gsettings set org.gnome.desktop.wm.preferences disable-workarounds false
    gsettings set org.gnome.desktop.wm.preferences focus-mode 'click'
    gsettings set org.gnome.desktop.wm.preferences focus-new-windows 'smart'
    gsettings set org.gnome.desktop.wm.preferences raise-on-click true
    gsettings set org.gnome.desktop.wm.preferences resize-with-right-button false
    gsettings set org.gnome.desktop.interface gtk-enable-primary-paste false
    gsettings set org.gnome.desktop.interface menubar-detachable false
    gsettings set org.gnome.desktop.interface overlay-scrolling true
    gsettings set org.gnome.desktop.interface show-battery-percentage true
    gsettings set org.gnome.shell.window-switcher current-workspace-only false

    # peripheral settings
    gsettings set org.gnome.desktop.peripherals.keyboard numlock-state false
    gsettings set org.gnome.desktop.peripherals.keyboard remember-numlock-state false
    gsettings set org.gnome.desktop.peripherals.keyboard repeat true
    gsettings set org.gnome.desktop.peripherals.keyboard repeat-interval 25
    gsettings set org.gnome.desktop.peripherals.mouse double-click 250
    gsettings set org.gnome.desktop.peripherals.mouse middle-click-emulation false
    gsettings set org.gnome.desktop.peripherals.mouse natural-scroll false
    gsettings set org.gnome.desktop.peripherals.mouse speed -0.2
    gsettings set org.gnome.desktop.peripherals.mouse accel-profile 'flat'
    gsettings set org.gnome.desktop.peripherals.touchpad accel-profile 'flat'
    gsettings set org.gnome.desktop.peripherals.touchpad click-method 'none'
    gsettings set org.gnome.desktop.peripherals.touchpad disable-while-typing false
    gsettings set org.gnome.desktop.peripherals.touchpad edge-scrolling-enabled false
    gsettings set org.gnome.desktop.peripherals.touchpad left-handed 'mouse'
    gsettings set org.gnome.desktop.peripherals.touchpad middle-click-emulation false
    gsettings set org.gnome.desktop.peripherals.touchpad natural-scroll true
    gsettings set org.gnome.desktop.peripherals.touchpad send-events 'enabled'
    gsettings set org.gnome.desktop.peripherals.touchpad speed 0.10000000000000001
    gsettings set org.gnome.desktop.peripherals.touchpad tap-and-drag false
    gsettings set org.gnome.desktop.peripherals.touchpad tap-and-drag-lock false
    gsettings set org.gnome.desktop.peripherals.touchpad tap-button-map 'default'
    gsettings set org.gnome.desktop.peripherals.touchpad tap-to-click false
    gsettings set org.gnome.desktop.peripherals.touchpad two-finger-scrolling-enabled true

    # privacy settings
    gsettings set org.gnome.desktop.media-handling automount true
    gsettings set org.gnome.desktop.media-handling automount-open true
    gsettings set org.gnome.desktop.media-handling autorun-never true
    gsettings set org.gnome.desktop.privacy disable-camera true
    gsettings set org.gnome.desktop.privacy disable-microphone false
    gsettings set org.gnome.desktop.privacy disable-sound-output false
    gsettings set org.gnome.desktop.privacy hide-identity false
    gsettings set org.gnome.desktop.privacy old-files-age 7
    gsettings set org.gnome.desktop.privacy recent-files-max-age -1
    gsettings set org.gnome.desktop.privacy remember-app-usage true
    gsettings set org.gnome.desktop.privacy remember-recent-files false
    gsettings set org.gnome.desktop.privacy remove-old-temp-files true
    gsettings set org.gnome.desktop.privacy remove-old-trash-files false
    gsettings set org.gnome.desktop.privacy show-full-name-in-top-bar false
    gsettings set org.gnome.desktop.privacy usb-protection true
    gsettings set org.gnome.desktop.privacy usb-protection-level 'lockscreen'
    gsettings set org.gnome.system.location enabled true
    gsettings set org.gnome.system.location max-accuracy-level 'city'

    # disable event sound
    gsettings set org.gnome.desktop.sound event-sounds false

    # disable hot corners
    gsettings set org.gnome.desktop.interface enable-hot-corners false

    # modal & checkalive timeouts
    gsettings set org.gnome.mutter attach-modal-dialogs true
    gsettings set org.gnome.mutter check-alive-timeout 15000

    # night light settings
    gsettings set org.gnome.settings-daemon.plugins.color night-light-enabled true
    gsettings set org.gnome.settings-daemon.plugins.color night-light-schedule-automatic false
    gsettings set org.gnome.settings-daemon.plugins.color night-light-schedule-from 0.0
    gsettings set org.gnome.settings-daemon.plugins.color night-light-schedule-to 6.0

    # keybinds/shortcuts
    gsettings set org.gnome.desktop.wm.keybindings minimize "['<Super>q']"
    gsettings set org.gnome.desktop.wm.keybindings toggle-maximized "['<Super>x']"
    gsettings set org.gnome.desktop.wm.keybindings cycle-group "['<Alt>grave']"
    gsettings set org.gnome.desktop.wm.keybindings cycle-group-backward "['<Shift><Alt>grave']"
    gsettings set org.gnome.desktop.wm.keybindings panel-run-dialog "['<Alt>F2']"
    gsettings set org.gnome.desktop.wm.keybindings switch-applications "['<Alt>Tab']"
    gsettings set org.gnome.desktop.wm.keybindings switch-applications-backward "['<Shift><Alt>Tab']"
    gsettings set org.gnome.desktop.wm.keybindings switch-input-source "['<Super>space']"
    gsettings set org.gnome.desktop.wm.keybindings switch-input-source-backward "['<Shift><Super>space']"
    gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-left "['<Control><Super>Left']"
    gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-right "['<Control><Super>Right']"
    gsettings set org.gnome.desktop.wm.preferences mouse-button-modifier '<Super>'
    gsettings set org.gnome.desktop.wm.preferences workspace-names "[]"

    gsettings set org.gnome.settings-daemon.plugins.media-keys volume-down "[]"
    gsettings set org.gnome.settings-daemon.plugins.media-keys volume-up "[]"
    gsettings set org.gnome.settings-daemon.plugins.media-keys mic-mute "[]"
    gsettings set org.gnome.shell.keybindings screenshot "[]"
    gsettings set org.gnome.shell.keybindings screenshot-window "[]"
    gsettings set org.gnome.shell.keybindings show-screenshot-ui "[]"
fi

# write everything to disk to prevent unpredictable behaviour
#  this might not be needed, but better to be explicit than implicit
sync

_echo-success "Done."
