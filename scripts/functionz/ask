#!/usr/bin/env bash

# HELP ask <user | system> <question | input | choice>; ask the user (stdout) or the system (stderr) a <type>
echo-channel () {
    if [[ -n "$IS_SYSTEM" ]]; then
        echo "$@" 1>&2
        return
    fi

    echo "$@"
}

echo-raw-channel () {
    if [[ -n "$IS_SYSTEM" ]]; then
        echo -n "$@" 1>&2
        return
    fi

    echo -n "$@"
}

ask-question () (
    while : ; do
        echo-raw-channel "$* [Y/n]:"
        read -r
        [[ $REPLY =~ ^[Yy]$ ]] && return 0
        [[ $REPLY =~ ^[Nn]$ ]] && return 1
        echo-channel ""
        echo-channel "Invalid reply \"$REPLY\", please answer with Y/y for Yes, or N/n for No."
    done
)

ask-input () (
    while : ; do
        echo-raw-channel "$*: "
        read -r
        if [[ $REPLY =~ ^([a-zA-Z0-9](-?[a-zA-Z0-9])*)+(\.[a-zA-Z0-9](-?[a-zA-Z0-9])*)*$ ]]; then
            echo "$REPLY"
            return
        fi
        echo-channel ""
        echo-channel "Invalid reply \"$REPLY\", please answer in the following range: ^([a-zA-Z0-9](-?[a-zA-Z0-9])*)+(\.[a-zA-Z0-9](-?[a-zA-Z0-9])*)*$"
    done
)

ask-choice () (
    # $1 onwards should be the options users have in detail
    # output is in stdout, so we need to capture that;
    readonly args=($@)
    readonly range="[0-$(($#-1))]"

    QUESTIONEE="user"
    [[ -n "$IS_SYSTEM" ]] && USER="system"
    while : ; do
        i=0
        for option in "$@"; do
            echo-channel "$((i++)). $option"
        done
        echo-raw-channel "Choice $range: "
        read -r
        if [[ $REPLY =~ ^[0-9][0-9]*$ && $REPLY -lt $# ]]; then
            echo-channel ""
            ask-question "Are you sure you want to pick \"${args[$REPLY]}\"?" || continue

            echo "$REPLY"
            return
        fi
        echo-channel ""
        echo-channel "Invalid reply > $REPLY, please answer in the range of $range."
    done
)

ask () (
    # sanity checks:
    #  - we need at least 3 arguments (shortest version is 'user choice Q&A'
    #  - 2nd argument must be either system or user
    [[ $# -lt 3 ]] && exit 2
    [[ $1 != "system" && $1 != "user" ]] && exit 2

    IS_SYSTEM=""
    # redirect to stderr if this is addressed to the 'system', aka this is called from a script
    #  that supresses stdout to catch the interactive user choice and do some work with it
    [[ $1 == "system" ]] && IS_SYSTEM="yes"

    [[ $2 == "question" ]] && ASK_TYPE="ask-question"
    [[ $2 == "input" ]] && ASK_TYPE="ask-input"
    [[ $2 == "choice" ]] && ASK_TYPE="ask-choice"

    # sanity: ASK_TYPE must not be non-existent after resolving
    [[ -z "$2" ]] && return 2

    $ASK_TYPE "${@:3}"
)

# run only if this file is not sourced
[[ "${BASH_SOURCE[0]}" == "${0}" ]] && ask "$@"
