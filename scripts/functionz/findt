#!/usr/bin/env -S python3 -S -OO
import sys


if sys.version_info.minor < 10:
    print(">= python3.10 required!", file=sys.stderr)
    sys.exit(1)


# HELP "./findt <path> <contents...>; search for text <contents> in <path> (dir or file)


import subprocess
import argparse
import os
import shutil
import shlex
import sys
import unicodedata
from copy import copy
from dataclasses import dataclass
from functools import partial
from multiprocessing import Pool
from pathlib import Path
from typing import Iterator, TextIO


def shorten_path(p: Path, max_width: int) -> str:
    # noinspection PyShadowingNames
    def is_relative_to_home(p: Path):
        return str(p).startswith(str(Path().home()))

    # noinspection PyShadowingNames
    def is_absolute(p: Path):
        """
        this will only work for unix-likes
        """
        return str(p).startswith("/")

    is_relative = is_relative_to_home(p)
    is_absolute = is_absolute(p)
    relative_offset = 0
    relative_offset = 2 if is_relative else relative_offset  # ~
    relative_offset = 1 if (not is_relative) and is_absolute else relative_offset  # /

    component_stack: list[str] = []
    component_total_width: int = relative_offset

    if (is_relative or is_absolute) and component_total_width + 3 < max_width:
        component_total_width += 3 + 1  # offset by 1 because of the preceding os.sep

    for c in p.parts[::-1]:
        pc = str(c)
        if len(pc) + component_total_width <= max_width:
            component_total_width += 1  # offset by 1 because of the preceding os.sep
            component_stack.insert(0, pc)
            component_total_width += len(pc)
            continue
        break

    if (is_relative or is_absolute) and component_total_width + 3 < max_width:
        component_stack.insert(0, "...")

    if is_relative:
        for p in Path().home().parts:
            has_dupe = p in component_stack
            if has_dupe:
                component_stack.remove(p)
        component_stack.insert(0, "~")

    if (not is_relative) and is_absolute:
        component_stack.insert(0, "")

    return os.sep.join(component_stack)


class UTF8Table:
    V_BORDER = "│"
    H_BORDER = "─"
    L_JUNCTION = "├"
    R_JUNCTION = "┤"
    TL_BORDER = "┌"
    TR_BORDER = "┐"
    BL_BORDER = "└"
    BR_BORDER = "┘"
    ESCAPES = str.maketrans('', '', ''.join([chr(char) for char in range(1, 32)]))

    def __init__(self):
        self.__width, self.height = shutil.get_terminal_size()

    @property
    def width(self) -> int:
        return self.__width - 2

    def top(self):
        return f"{UTF8Table.TL_BORDER}{UTF8Table.H_BORDER * self.width}{UTF8Table.TR_BORDER}"

    def junction(self):
        return f"{UTF8Table.L_JUNCTION}{UTF8Table.H_BORDER * self.width}{UTF8Table.R_JUNCTION}"

    def header(self, string) -> str:
        return "\n".join([
            self.top(),
            f"{UTF8Table.V_BORDER}{string[:self.width]}{UTF8Table.V_BORDER}",
            self.junction()
        ])

    def row(self, string) -> str:
        return f"{UTF8Table.V_BORDER}{string:<{self.width}}{UTF8Table.V_BORDER}"

    def bot(self) -> str:
        return f"{UTF8Table.BL_BORDER}{UTF8Table.H_BORDER * self.width}{UTF8Table.BR_BORDER}"

    @staticmethod
    def is_piped() -> bool:
        try:
            os.get_terminal_size()
            return False
        except OSError:
            return True


# https://stackoverflow.com/a/518232
def normalize(string, normalized=False) -> str:
    if not normalized:
        return string
    return "".join(c for c in unicodedata.normalize("NFD", string) if unicodedata.category(c) != "Mn")


def upper(string, uppercase=False) -> str:
    if not uppercase:
        return string
    return string.upper()


@dataclass
class Block:
    owner: Path
    _query: str

    before: list[str]
    exact_match_lc: int
    exact_match: str
    after: list[str]

    @property
    def rank(self) -> int:
        return self.exact_match_lc + 1

    def lines(self) -> Iterator[tuple[int, str]]:
        block_lc = self.rank - len(self.before)
        for bline in self.before:
            yield block_lc, bline
            block_lc += 1

        yield block_lc, self.exact_match
        block_lc += 1

        for aline in self.after:
            yield block_lc, aline
            block_lc += 1

        return


class Aggregate:
    def __init__(self, owner: Path, padding: int):
        self.__owner: Path = owner
        self.__padding: int = padding
        self.__pqueries: list[str] = []
        self.__lines: dict[int, str] = {}
        self.__matched_lines: list[int] = []
        self.__start_lc: int = 9999999
        self.__end_lc: int = -1

    # noinspection PyShadowingNames
    def aggregate(self, blocks: list[Block]) -> None:
        blocks = sorted(blocks, key=lambda b: b.rank)
        for b in blocks:
            self.__matched_lines.append(b.rank)
            self.__pqueries.append(b._query)
            for line_count, line in b.lines():
                self.__start_lc = min(line_count, self.__start_lc)
                self.__end_lc = max(line_count, self.__end_lc)
                if line_count in self.__lines:
                    continue
                self.__lines[line_count] = line

    def simple(self):
        # line count padding
        max_lc_padding = len(str(self.__end_lc))

        def build(lc: int, line: str) -> str:
            return f"{format(lc, str(max_lc_padding) + 'd')}: {line.replace('	', '    ')}"

        yield True, f"{str(self.__owner)} lines~{self.__padding}: {' '.join(list(map(str, sorted(self.__matched_lines))))}"

        old_k = -1
        first = True
        for k in sorted(self.__lines.keys()):
            is_seq = old_k + 1 == k
            if first:
                first = False
                is_seq = True

            yield is_seq, build(k, self.__lines[k])
            old_k = k

        return

    def pretty(self, max_width) -> Iterator[tuple[bool, str]]:
        # line count padding
        max_lc_padding = len(str(self.__end_lc))

        def build(lc: int, line: str) -> str:
            stem = f"{format(lc, str(max_lc_padding) + 'd')}: "
            return f"{stem}{line.replace('	', '    ')[:max_width - len(stem)]}"

        infix = f" lines~{self.__padding}: "
        header_content = f" ".join(list(map(str, sorted(self.__matched_lines))))
        stem = shorten_path(self.__owner, max(max_width - len(header_content) - len(infix), max_width // 3))
        padding_width = max_width - len(stem) - len(infix)
        yield True, f"{stem}{infix}{header_content[:max_width - len(stem) - len(infix)]:<{padding_width}}"

        old_k = -1
        first = True
        for k in sorted(self.__lines.keys()):
            is_seq = old_k + 1 == k
            if first:
                first = False
                is_seq = True

            yield is_seq, build(k, self.__lines[k])
            old_k = k

        return


def match_blocks(file: Path,
                 queries: list[str],
                 padding: int = 2,
                 normalized: bool = False,
                 uppercase: bool = False) -> Iterator[Block]:
    def insert(q: list, e: object, padding: int = padding) -> None:
        if len(q) >= padding != 0:
            # remove the oldest element (if we're using .append)
            q.pop(0)

        if padding != 0:
            q.append(e)

    def advance(f: TextIO) -> Iterator[tuple[int, str, str]]:
        while True:
            previous_tell = f.tell()
            raw_line = f.readline().rstrip()
            line = upper(normalize(raw_line, normalized=normalized), uppercase=uppercase)
            current_tell = f.tell()
            if current_tell == previous_tell:
                return current_tell, None, None
            yield current_tell, line, raw_line

    def peek(f: TextIO, pc: int) -> list[str]:
        """
        :param f: fhandle
        :param pc: peek count
        """
        tell = f.tell()
        lines = []
        try:
            advance_iterator = advance(f)
            for i in range(pc):
                _, _, raw_line = next(advance_iterator)
                lines.append(raw_line)
            return lines
        except StopIteration:
            return lines
        finally:
            f.seek(tell)

    # noinspection PyShadowingNames
    def drive(f: TextIO, padding: int = padding) -> Iterator[Block]:
        lc = 0
        before = []
        for tell, line, raw_line in advance(f):
            truthy_query_results = []
            for query in queries:
                query = upper(normalize(query, normalized=normalized), uppercase=uppercase)
                if query in line:
                    query_start = line.index(query)
                    truthy_query_results.append((query, query_start, query_start + len(query)))

            yield from map(
                lambda result: Block(
                    owner=file,
                    _query=result[0],
                    before=copy(before),
                    after=peek(f, padding),
                    exact_match=raw_line,
                    exact_match_lc=lc
                ),
                truthy_query_results
            )
            insert(before, raw_line)
            lc += 1
        return

    if not file.exists():
        return []
    try:
        with open(file, "r") as fhandle:
            yield from drive(fhandle, padding=padding)
    except UnicodeDecodeError:
        pass  # silently skip undecodeable files


def preprocess(directory: Path) -> list[Path]:
    """
    Find all files from the directory provided, and return their path.
    If the path provided is a file, it will return itself.
    :returns: list of absolute files, that exist
    """
    def is_ignoreable(p: Path) -> bool:
        parts = p.parts
        return ".idea" in parts or ".git" in parts or ".vscode" in parts or "node_modules" in parts

    if directory is None:
        raise ValueError("dir null not permitted")
    if not directory.exists():
        return []
    if directory.is_file():
        return [directory]
    # block devices etc. check
    if not directory.is_dir():
        return []
    return list(
        filter(
            lambda p: p.is_file() and not is_ignoreable(p),
            [Path(p) for p in directory.rglob("*")]
        )
    )


def pmap_match(path, options) -> tuple[str, list[Block]] | tuple[None, None]:
    matched_blocks = match_blocks(
        path,
        queries=options.filters,
        padding=options.padding,
        normalized=options.normalized,
        uppercase=options.insensitive
    )
    key = str(path)
    blocks = []
    try:
        for block in matched_blocks:
            blocks.append(block)
        return key, blocks
    except PermissionError:
        print(f"Permission denied to read {key}!", file=sys.stderr)
    return None, None


def strategy_echo_pretty(multimatches: dict[str, list[Block]], **kwargs):
    """
    DEFAULT STRATEGY.
    Print the aggregates to stdout, as an extended ascii table.
    """
    # sanity: this should never fail
    assert isinstance(multimatches, dict)

    for k, v in multimatches.items():
        aggregate = Aggregate(Path(k), kwargs["padding"])
        aggregate.aggregate(v)

        table = UTF8Table()
        ppretty = aggregate.pretty(table.width)
        _, header = next(ppretty)
        print(table.header(header))
        for is_seq, table_entry in ppretty:
            if not is_seq:
                print(table.junction())
            print(table.row(table_entry))
        print(table.bot())


def strategy_echo_minimal(multimatches: dict[str, list[Block]], **kwargs):
    """
    DEFAULT STRATEGY WHEN PIPED, OR EXPLICITLY.
    Print the aggregates to stdout, without decorations.
    """
    # sanity: this should never fail
    assert isinstance(multimatches, dict)

    for k, v in multimatches.items():
        aggregate = Aggregate(Path(k), kwargs["padding"])
        aggregate.aggregate(v)

        for _, entry in aggregate.simple():
            print(entry)


def strategy_exec(multimatches: dict[str, list[Block]], **kwargs):
    """
    DEFAULT STRATEGY FOR --exec.
    Shlex split the executable, and afterward, for each match:
    Argument $1 is the filename.
    Argument $2 is the first match's line number.
    Argument $3 is the first match's line contents.
    Argument $4 is the second match's line number.
    Argument $5 is the second match's line contents.
    ... same thing for everything else.

    When we're done with a file, run the script with the aforementioned arguments.
    @throws OSError
    """
    executable = kwargs["exec"]
    # sanity: these should never fail
    assert isinstance(multimatches, dict)
    assert isinstance(executable, str)

    for fn, blocks in multimatches.items():
        to_exec = shlex.split(executable)
        # I love the fact that python does NOT follow the builder paradigm
        #  sarcasm: I do NOT.
        #  Why is a 'StringBuilder'-like paradigm so hard to grasp,
        #  in a language where convenience is the norm?
        to_exec.append(fn)

        for entry in blocks:
            to_exec.append(str(entry.exact_match_lc))
            to_exec.append(entry.exact_match)

        subprocess.Popen(to_exec, shell=False, env=os.environ)


def strategy_contains(multimatches: dict[str, list[Block]], **kwargs):
    """
    DEFAULT STRATEGY WHEN PIPED, OR EXPLICITLY.
    Print the aggregate's owners' filename *uniquely* to stdout, no decorations.
    """
    # sanity: this should never fail
    assert isinstance(multimatches, dict)
    names = sorted([k for k, _ in multimatches.items()])
    for p in names:
        print(p)


def main(options):
    """
    @throws Exception on strategies other than printing strategies.
    """
    padding = options.padding
    decorated = options.decorated
    containers_only = options.contains
    multimatches: dict[str, list[Block]] = {}
    paths = preprocess(Path(options.path))
    exec = options.exec if isinstance(options.exec, str) and shutil.which(options.exec) else None

    partial_match = partial(pmap_match, options=options)
    with Pool(os.cpu_count()) as pool:
        match_filter = lambda res: bool(res[1])
        results = tuple(filter(match_filter, pool.map(partial_match, paths)))

    for k, v in results:
        multimatches[k] = v

    strategy = None
    is_piped = UTF8Table.is_piped()
    if strategy is None and containers_only:
        strategy = strategy_contains
    if strategy is None and exec is not None:
        strategy = partial(strategy_exec, exec=exec,)
    if strategy is None and (decorated and not is_piped):
        strategy = partial(strategy_echo_pretty, padding=padding,)
    if strategy is None and (not decorated or is_piped):
        strategy = partial(strategy_echo_minimal, padding=padding,)

    strategy(multimatches)


@dataclass
class UserOptions:
    path: str
    filters: list[str]
    # -i, --insensitive
    insensitive: bool
    # -c, --contains
    contains: bool
    normalized: bool
    # --padding <int>
    padding: int
    # --no-decorations is the inverse of this value
    decorated: bool
    # --exec <executable>
    exec: str | None


def _parse_args(args) -> UserOptions:
    parser = argparse.ArgumentParser(description="findt: a recursive content text locator")
    parser.add_argument("path", type=str)
    parser.add_argument("filters", nargs="+")
    parser.add_argument("-i", "--insensitive", default=False, action="store_true", required=False,
        help="Match case-insensitively. Off by default.")
    parser.add_argument("-c", "--contains", default=False, action="store_true", required=False,
        help="Only display the containers that matched (uniquely), separated by newlines. Off by default.")
    parser.add_argument("-d", "--no-decorations", default=False, action="store_true", required=False,
        help="Do not add decorative borders, and allow wrapping the screen. Decorations are on by default.")
    parser.add_argument("--padding", type=int, default=2, required=False,
        help="Padding around the matched term. Default is 2.")
    parser.add_argument("-e", "--exec", type=str, default=None, required=False,
        help="Executable to run with the matched term."
             "Shlex split the executable, and afterward, for each match:"
             "Argument $1 is the filename."
             "Argument $2 is the first match's line number."
             "Argument $3 is the first match's line contents."
             "Argument $4 is the second match's line number."
             "Argument $5 is the second match's line contents."
             "... same thing for everything else.")

    options = parser.parse_args(args)
    if isinstance(options.exec, str) and not shutil.which(options.exec):
        print(
            f"""Cannot continue. Argument --exec was given, however it resolved to nothing.
Does the file actually exist?
Argument:   `{options.exec}`
Resolution: `{shutil.which(options.exec)}`""", file=sys.stderr)
        sys.exit(2)

    return UserOptions(
        path=options.path,
        filters=options.filters,
        insensitive=options.insensitive,
        contains=options.contains,
        normalized=options.insensitive,
        padding=options.padding,
        decorated=not options.no_decorations,
        exec=options.exec
    )


if __name__ == "__main__":
    try:
        main(_parse_args(sys.argv[1:]))
    except Exception as err:
        print(f"FATAL ERROR: {err}", file=sys.stderr)
        sys.exit(1)
