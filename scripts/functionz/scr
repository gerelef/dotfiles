#!/usr/bin/env bash

# HELP scratch <buffer name>; will open a new (or existing) scratch file.

BUFFERS_HOME="${XDG_CONFIG_HOME:-$HOME/.config}/scratch"

echo-help-text () {
    echo "scr [<buffer name>] [d <buffer name>] [p <buffer name>]"
    echo ""
    echo "scr                  - the last modified named buffer will be opened in the default \$EDITOR"
    echo "scr <buffer name>    - the named buffer will be opened in the default \$EDITOR"
    echo "scr ls               - all named buffers will be listed"
    echo "scr p <buffer name>  - the named buffer's path will be echoed"
    echo "scr d <buffer name>  - the named buffer will be deleted"
    echo ""
    echo "You may not begin a buffer's name with a dash ( - )."
    echo ""
    echo "No buffer name provided." 1>&2 2>/dev/null
    echo "You can create a new buffer, or pick one of the following ones:" 1>&2 2>/dev/null
    echo-available-buffers
}

trim () {
    [[ "$1" =~ [^[:space:]](.*[^[:space:]])? ]]
    printf "%s" "$BASH_REMATCH"
}

detect-buffer-executable () {
    [[ $(trim "$(grep -m 1 . "$1")") == \#!* ]] && return
}

echo-available-buffers () {
    for filename in "$BUFFERS_HOME"/*; do
        [[ "$(basename -- "$filename")" = "*" ]] && continue
        echo "$(basename -- "$filename")" 1>&2 2> /dev/null
    done
}

main () (
    if [[ -z $EDITOR ]]; then
        # the following line is intentionally single quoted
        echo '$EDITOR envvar is not defined, therefore no editor can be used.' 1>&2 2>/dev/null
        echo 'Please reconfigure your environment and retry.' 1>&2 2>/dev/null
        exit 2
    fi

    args=("${@}")
    nargs="$#"  # alternative is ${#args[@]}, which is a no-go syntax lol

    # if there are no arguments, pretend we're given the last modified buffer as an argument,
    #  which will be the first argument
    if [[ $nargs -eq 0 ]]; then
        args=( $(ls --sort=time "$BUFFERS_HOME") )
        nargs=1
    fi

    if [[ $nargs -eq 1 ]] && [[ ${args[0]} = "-h" || ${args[0]} = "--help" ]]; then
        echo-help-text
        exit 2
    fi

    if [[ $nargs -eq 1 && ${args[0]} = -* ]]; then
        echo-help-text
        exit 2
    fi

    if [[ $nargs -eq 1 && ${args[0]} = "ls" ]]; then
        echo-available-buffers
        exit
    fi

    if ! cd "$BUFFERS_HOME"; then
        echo "Failed to change CWD to $BUFFERS_HOME. Creating directories..." 1>&2 2>/dev/null
        mkdir -p "$BUFFERS_HOME"
        # if this also fails, we need to stop because something's gone sideways
        cd "$BUFFERS_HOME" || exit 1
    fi

    if [[ ${args[0]} = "d" ]]; then
        if [[ $nargs -lt 2 ]]; then
            echo "No buffer to be deleted was provided."
            echo "You may delete one of the following buffers:"
            echo-available-buffers
            exit 2
        fi
        rm -vf "$BUFFERS_HOME/${args[1]}"
        exit
    fi

    if [[ ${args[0]} = "p" ]]; then
        if [[ $nargs -lt 2 ]]; then
            echo "No buffer to be echoed was provided."
            echo "You may echo one of the following buffers:"
            echo-available-buffers
            exit 2
        fi
        [[ -f "$BUFFERS_HOME/${args[1]}" ]] && echo "$BUFFERS_HOME/${args[1]}"
        # if the previous call fails, this will die silently, but that's suprisingly
        #  ok, since the only chance of _not_ echoing out the path would be if
        #  it never existed.
        exit
    fi

    echo "Opening scratchpad $BUFFERS_HOME/${args[0]} ..."
    "$EDITOR" -- "$BUFFERS_HOME/${args[0]}" || exit

    echo "Editor closed."
    # editor closed w/o saving
    if [[ ! -f "$BUFFERS_HOME/${args[0]}" ]]; then
        echo "Buffer '${args[0]}' was discarded."
        exit 0
    fi
    if detect-buffer-executable "$BUFFERS_HOME/${args[0]}"; then
        echo "Detected executable buffer via shebang. Adding executable permissions." 1>&2 2>/dev/null
        chmod +x "$BUFFERS_HOME/${args[0]}" || exit
    fi
)

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "$@"
